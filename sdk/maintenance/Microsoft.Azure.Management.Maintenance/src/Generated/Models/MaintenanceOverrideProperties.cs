// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Maintenance.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Definition of a MaintenanceOverrideProperties
    /// </summary>
    public partial class MaintenanceOverrideProperties
    {
        /// <summary>
        /// Initializes a new instance of the MaintenanceOverrideProperties
        /// class.
        /// </summary>
        public MaintenanceOverrideProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MaintenanceOverrideProperties
        /// class.
        /// </summary>
        /// <param name="startDateTime">Effective start date of the maintenance
        /// override window in YYYY-MM-DD hh:mm format. The start date can be
        /// set to either the current date or future date. The window will be
        /// created in the time zone provided and adjusted to daylight savings
        /// according to that time zone.</param>
        /// <param name="endDateTime">Effective end date of the maintenance
        /// override window in YYYY-MM-DD hh:mm format. The window will be
        /// created in the time zone provided and adjusted to daylight savings
        /// according to that time zone. Expiration date must be set to a
        /// future date. If not provided, it will be set to the maximum
        /// datetime 9999-12-31 23:59:59.</param>
        /// <param name="timeZone">Name of the timezone. List of timezones can
        /// be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example:
        /// Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard
        /// Time, Cen. Australia Standard Time.</param>
        /// <param name="overrideProperties">Gets or sets overrideProperties of
        /// the maintenanceConfiguration</param>
        public MaintenanceOverrideProperties(System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? endDateTime = default(System.DateTime?), string timeZone = default(string), IDictionary<string, string> overrideProperties = default(IDictionary<string, string>))
        {
            StartDateTime = startDateTime;
            EndDateTime = endDateTime;
            TimeZone = timeZone;
            OverrideProperties = overrideProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets effective start date of the maintenance override
        /// window in YYYY-MM-DD hh:mm format. The start date can be set to
        /// either the current date or future date. The window will be created
        /// in the time zone provided and adjusted to daylight savings
        /// according to that time zone.
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets effective end date of the maintenance override window
        /// in YYYY-MM-DD hh:mm format. The window will be created in the time
        /// zone provided and adjusted to daylight savings according to that
        /// time zone. Expiration date must be set to a future date. If not
        /// provided, it will be set to the maximum datetime 9999-12-31
        /// 23:59:59.
        /// </summary>
        [JsonProperty(PropertyName = "endDateTime")]
        public System.DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or sets name of the timezone. List of timezones can be
        /// obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones()
        /// in PowerShell. Example: Pacific Standard Time, UTC, W. Europe
        /// Standard Time, Korea Standard Time, Cen. Australia Standard Time.
        /// </summary>
        [JsonProperty(PropertyName = "timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or sets overrideProperties of the maintenanceConfiguration
        /// </summary>
        [JsonProperty(PropertyName = "overrideProperties")]
        public IDictionary<string, string> OverrideProperties { get; set; }

    }
}
